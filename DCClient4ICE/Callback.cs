//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `Callback.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace dc
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface SrvCallbackReceiver : global::Ice.Object, SrvCallbackReceiverOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface SubCallbackReceiver : global::Ice.Object, SubCallbackReceiverOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface DcClientIce : global::Ice.Object, DcClientIceOperations_
    {
    }
}

namespace dc
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_SrvCallbackReceiver_callback(byte[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_SubCallbackReceiver_callback();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_DcClientIce_srv(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_DcClientIce_act(byte[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_DcClientIce_actDest(byte[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_DcClientIce_pub();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_DcClientIce_pubDest();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_DcClientIce_sub(bool ret);
}

namespace dc
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public interface SrvCallbackReceiverPrx : global::Ice.ObjectPrx
    {
        byte[] callback(string extInfo, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<byte[]> callbackAsync(string extInfo, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_SrvCallbackReceiver_callback> begin_callback(string extInfo, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_callback(string extInfo, byte[] bytes, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_callback(string extInfo, byte[] bytes, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        byte[] end_callback(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public interface SubCallbackReceiverPrx : global::Ice.ObjectPrx
    {
        void callback(byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task callbackAsync(byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_SubCallbackReceiver_callback> begin_callback(byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_callback(byte[] bytes, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_callback(byte[] bytes, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_callback(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public interface DcClientIcePrx : global::Ice.ObjectPrx
    {
        bool srv(string clientId, string topic, SrvCallbackReceiverPrx receiver, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> srvAsync(string clientId, string topic, SrvCallbackReceiverPrx receiver, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_DcClientIce_srv> begin_srv(string clientId, string topic, SrvCallbackReceiverPrx receiver, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_srv(string clientId, string topic, SrvCallbackReceiverPrx receiver, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_srv(string clientId, string topic, SrvCallbackReceiverPrx receiver, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_srv(global::Ice.AsyncResult asyncResult);

        byte[] act(string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<byte[]> actAsync(string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_DcClientIce_act> begin_act(string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_act(string topic, byte[] bytes, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_act(string topic, byte[] bytes, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        byte[] end_act(global::Ice.AsyncResult asyncResult);

        byte[] actDest(string dest, string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<byte[]> actDestAsync(string dest, string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_DcClientIce_actDest> begin_actDest(string dest, string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_actDest(string dest, string topic, byte[] bytes, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_actDest(string dest, string topic, byte[] bytes, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        byte[] end_actDest(global::Ice.AsyncResult asyncResult);

        void pub(string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task pubAsync(string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_DcClientIce_pub> begin_pub(string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_pub(string topic, byte[] bytes, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_pub(string topic, byte[] bytes, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_pub(global::Ice.AsyncResult asyncResult);

        void pubDest(string dest, string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task pubDestAsync(string dest, string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_DcClientIce_pubDest> begin_pubDest(string dest, string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_pubDest(string dest, string topic, byte[] bytes, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_pubDest(string dest, string topic, byte[] bytes, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_pubDest(global::Ice.AsyncResult asyncResult);

        bool sub(string clientId, string topic, SubCallbackReceiverPrx receiver, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> subAsync(string clientId, string topic, SubCallbackReceiverPrx receiver, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_DcClientIce_sub> begin_sub(string clientId, string topic, SubCallbackReceiverPrx receiver, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_sub(string clientId, string topic, SubCallbackReceiverPrx receiver, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_sub(string clientId, string topic, SubCallbackReceiverPrx receiver, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_sub(global::Ice.AsyncResult asyncResult);
    }
}

namespace dc
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public interface SrvCallbackReceiverOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        byte[] callback(string extInfo, byte[] bytes, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public interface SubCallbackReceiverOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        void callback(byte[] bytes, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public interface DcClientIceOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        bool srv(string clientId, string topic, SrvCallbackReceiverPrx receiver, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        byte[] act(string topic, byte[] bytes, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        byte[] actDest(string dest, string topic, byte[] bytes, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        global::System.Threading.Tasks.Task pubAsync(string topic, byte[] bytes, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        global::System.Threading.Tasks.Task pubDestAsync(string dest, string topic, byte[] bytes, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        bool sub(string clientId, string topic, SubCallbackReceiverPrx receiver, global::Ice.Current current = null);
    }
}

namespace dc
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public sealed class ByteSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(global::Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    [global::System.Serializable]
    public sealed class SrvCallbackReceiverPrxHelper : global::Ice.ObjectPrxHelperBase, SrvCallbackReceiverPrx
    {
        public SrvCallbackReceiverPrxHelper()
        {
        }

        public SrvCallbackReceiverPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public byte[] callback(string extInfo, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_callbackAsync(extInfo, bytes, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<byte[]> callbackAsync(string extInfo, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_callbackAsync(extInfo, bytes, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<byte[]> _iceI_callbackAsync(string iceP_extInfo, byte[] iceP_bytes, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_callback_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<byte[]>(progress, cancel);
            _iceI_callback(iceP_extInfo, iceP_bytes, context, synchronous, completed);
            return completed.Task;
        }

        private const string _callback_name = "callback";

        private void _iceI_callback(string iceP_extInfo, byte[] iceP_bytes, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<byte[]>(completed);
            outAsync.invoke(
                _callback_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_extInfo);
                    ByteSeqHelper.write(ostr, iceP_bytes);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    byte[] ret;
                    ret = ByteSeqHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_SrvCallbackReceiver_callback> begin_callback(string extInfo, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_callback(extInfo, bytes, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_callback(string extInfo, byte[] bytes, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_callback(extInfo, bytes, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_callback(string extInfo, byte[] bytes, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_callback(extInfo, bytes, context, callback, cookie, false);
        }

        public byte[] end_callback(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _callback_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<byte[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SrvCallbackReceiver_callback> begin_callback(string iceP_extInfo, byte[] iceP_bytes, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_callback_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SrvCallbackReceiver_callback, byte[]>(
                (Callback_SrvCallbackReceiver_callback cb, byte[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _callback_name, cookie, completedCallback);
            _iceI_callback(iceP_extInfo, iceP_bytes, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static SrvCallbackReceiverPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SrvCallbackReceiverPrx r = b as SrvCallbackReceiverPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                SrvCallbackReceiverPrxHelper h = new SrvCallbackReceiverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SrvCallbackReceiverPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            SrvCallbackReceiverPrx r = b as SrvCallbackReceiverPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                SrvCallbackReceiverPrxHelper h = new SrvCallbackReceiverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SrvCallbackReceiverPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    SrvCallbackReceiverPrxHelper h = new SrvCallbackReceiverPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SrvCallbackReceiverPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    SrvCallbackReceiverPrxHelper h = new SrvCallbackReceiverPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SrvCallbackReceiverPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SrvCallbackReceiverPrx r = b as SrvCallbackReceiverPrx;
            if(r == null)
            {
                SrvCallbackReceiverPrxHelper h = new SrvCallbackReceiverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SrvCallbackReceiverPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            SrvCallbackReceiverPrxHelper h = new SrvCallbackReceiverPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::dc::SrvCallbackReceiver"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, SrvCallbackReceiverPrx v)
        {
            ostr.writeProxy(v);
        }

        public static SrvCallbackReceiverPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                SrvCallbackReceiverPrxHelper result = new SrvCallbackReceiverPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    [global::System.Serializable]
    public sealed class SubCallbackReceiverPrxHelper : global::Ice.ObjectPrxHelperBase, SubCallbackReceiverPrx
    {
        public SubCallbackReceiverPrxHelper()
        {
        }

        public SubCallbackReceiverPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void callback(byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_callbackAsync(bytes, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task callbackAsync(byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_callbackAsync(bytes, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_callbackAsync(byte[] iceP_bytes, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_callback(iceP_bytes, context, synchronous, completed);
            return completed.Task;
        }

        private const string _callback_name = "callback";

        private void _iceI_callback(byte[] iceP_bytes, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _callback_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ByteSeqHelper.write(ostr, iceP_bytes);
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_SubCallbackReceiver_callback> begin_callback(byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_callback(bytes, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_callback(byte[] bytes, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_callback(bytes, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_callback(byte[] bytes, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_callback(bytes, context, callback, cookie, false);
        }

        public void end_callback(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _callback_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SubCallbackReceiver_callback> begin_callback(byte[] iceP_bytes, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SubCallbackReceiver_callback, object>(
                (Callback_SubCallbackReceiver_callback cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _callback_name, cookie, completedCallback);
            _iceI_callback(iceP_bytes, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static SubCallbackReceiverPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SubCallbackReceiverPrx r = b as SubCallbackReceiverPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                SubCallbackReceiverPrxHelper h = new SubCallbackReceiverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SubCallbackReceiverPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            SubCallbackReceiverPrx r = b as SubCallbackReceiverPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                SubCallbackReceiverPrxHelper h = new SubCallbackReceiverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SubCallbackReceiverPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    SubCallbackReceiverPrxHelper h = new SubCallbackReceiverPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SubCallbackReceiverPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    SubCallbackReceiverPrxHelper h = new SubCallbackReceiverPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SubCallbackReceiverPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SubCallbackReceiverPrx r = b as SubCallbackReceiverPrx;
            if(r == null)
            {
                SubCallbackReceiverPrxHelper h = new SubCallbackReceiverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SubCallbackReceiverPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            SubCallbackReceiverPrxHelper h = new SubCallbackReceiverPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::dc::SubCallbackReceiver"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, SubCallbackReceiverPrx v)
        {
            ostr.writeProxy(v);
        }

        public static SubCallbackReceiverPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                SubCallbackReceiverPrxHelper result = new SubCallbackReceiverPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    [global::System.Serializable]
    public sealed class DcClientIcePrxHelper : global::Ice.ObjectPrxHelperBase, DcClientIcePrx
    {
        public DcClientIcePrxHelper()
        {
        }

        public DcClientIcePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public bool srv(string clientId, string topic, SrvCallbackReceiverPrx receiver, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_srvAsync(clientId, topic, receiver, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte[] act(string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_actAsync(topic, bytes, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte[] actDest(string dest, string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_actDestAsync(dest, topic, bytes, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void pub(string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_pubAsync(topic, bytes, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void pubDest(string dest, string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_pubDestAsync(dest, topic, bytes, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool sub(string clientId, string topic, SubCallbackReceiverPrx receiver, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_subAsync(clientId, topic, receiver, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<bool> srvAsync(string clientId, string topic, SrvCallbackReceiverPrx receiver, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_srvAsync(clientId, topic, receiver, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_srvAsync(string iceP_clientId, string iceP_topic, SrvCallbackReceiverPrx iceP_receiver, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_srv_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_srv(iceP_clientId, iceP_topic, iceP_receiver, context, synchronous, completed);
            return completed.Task;
        }

        private const string _srv_name = "srv";

        private void _iceI_srv(string iceP_clientId, string iceP_topic, SrvCallbackReceiverPrx iceP_receiver, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _srv_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_clientId);
                    ostr.writeString(iceP_topic);
                    SrvCallbackReceiverPrxHelper.write(ostr, iceP_receiver);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<byte[]> actAsync(string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_actAsync(topic, bytes, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<byte[]> _iceI_actAsync(string iceP_topic, byte[] iceP_bytes, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_act_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<byte[]>(progress, cancel);
            _iceI_act(iceP_topic, iceP_bytes, context, synchronous, completed);
            return completed.Task;
        }

        private const string _act_name = "act";

        private void _iceI_act(string iceP_topic, byte[] iceP_bytes, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<byte[]>(completed);
            outAsync.invoke(
                _act_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_topic);
                    ByteSeqHelper.write(ostr, iceP_bytes);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    byte[] ret;
                    ret = ByteSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<byte[]> actDestAsync(string dest, string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_actDestAsync(dest, topic, bytes, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<byte[]> _iceI_actDestAsync(string iceP_dest, string iceP_topic, byte[] iceP_bytes, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_actDest_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<byte[]>(progress, cancel);
            _iceI_actDest(iceP_dest, iceP_topic, iceP_bytes, context, synchronous, completed);
            return completed.Task;
        }

        private const string _actDest_name = "actDest";

        private void _iceI_actDest(string iceP_dest, string iceP_topic, byte[] iceP_bytes, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<byte[]>(completed);
            outAsync.invoke(
                _actDest_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_dest);
                    ostr.writeString(iceP_topic);
                    ByteSeqHelper.write(ostr, iceP_bytes);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    byte[] ret;
                    ret = ByteSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task pubAsync(string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_pubAsync(topic, bytes, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_pubAsync(string iceP_topic, byte[] iceP_bytes, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_pub(iceP_topic, iceP_bytes, context, synchronous, completed);
            return completed.Task;
        }

        private const string _pub_name = "pub";

        private void _iceI_pub(string iceP_topic, byte[] iceP_bytes, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _pub_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_topic);
                    ByteSeqHelper.write(ostr, iceP_bytes);
                });
        }

        public global::System.Threading.Tasks.Task pubDestAsync(string dest, string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_pubDestAsync(dest, topic, bytes, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_pubDestAsync(string iceP_dest, string iceP_topic, byte[] iceP_bytes, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_pubDest(iceP_dest, iceP_topic, iceP_bytes, context, synchronous, completed);
            return completed.Task;
        }

        private const string _pubDest_name = "pubDest";

        private void _iceI_pubDest(string iceP_dest, string iceP_topic, byte[] iceP_bytes, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _pubDest_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_dest);
                    ostr.writeString(iceP_topic);
                    ByteSeqHelper.write(ostr, iceP_bytes);
                });
        }

        public global::System.Threading.Tasks.Task<bool> subAsync(string clientId, string topic, SubCallbackReceiverPrx receiver, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_subAsync(clientId, topic, receiver, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_subAsync(string iceP_clientId, string iceP_topic, SubCallbackReceiverPrx iceP_receiver, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_sub_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_sub(iceP_clientId, iceP_topic, iceP_receiver, context, synchronous, completed);
            return completed.Task;
        }

        private const string _sub_name = "sub";

        private void _iceI_sub(string iceP_clientId, string iceP_topic, SubCallbackReceiverPrx iceP_receiver, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _sub_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_clientId);
                    ostr.writeString(iceP_topic);
                    SubCallbackReceiverPrxHelper.write(ostr, iceP_receiver);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_DcClientIce_srv> begin_srv(string clientId, string topic, SrvCallbackReceiverPrx receiver, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_srv(clientId, topic, receiver, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_srv(string clientId, string topic, SrvCallbackReceiverPrx receiver, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_srv(clientId, topic, receiver, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_srv(string clientId, string topic, SrvCallbackReceiverPrx receiver, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_srv(clientId, topic, receiver, context, callback, cookie, false);
        }

        public bool end_srv(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _srv_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_DcClientIce_srv> begin_srv(string iceP_clientId, string iceP_topic, SrvCallbackReceiverPrx iceP_receiver, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_srv_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_DcClientIce_srv, bool>(
                (Callback_DcClientIce_srv cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _srv_name, cookie, completedCallback);
            _iceI_srv(iceP_clientId, iceP_topic, iceP_receiver, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_DcClientIce_act> begin_act(string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_act(topic, bytes, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_act(string topic, byte[] bytes, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_act(topic, bytes, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_act(string topic, byte[] bytes, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_act(topic, bytes, context, callback, cookie, false);
        }

        public byte[] end_act(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _act_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<byte[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_DcClientIce_act> begin_act(string iceP_topic, byte[] iceP_bytes, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_act_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_DcClientIce_act, byte[]>(
                (Callback_DcClientIce_act cb, byte[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _act_name, cookie, completedCallback);
            _iceI_act(iceP_topic, iceP_bytes, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_DcClientIce_actDest> begin_actDest(string dest, string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_actDest(dest, topic, bytes, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_actDest(string dest, string topic, byte[] bytes, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_actDest(dest, topic, bytes, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_actDest(string dest, string topic, byte[] bytes, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_actDest(dest, topic, bytes, context, callback, cookie, false);
        }

        public byte[] end_actDest(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _actDest_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<byte[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_DcClientIce_actDest> begin_actDest(string iceP_dest, string iceP_topic, byte[] iceP_bytes, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_actDest_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_DcClientIce_actDest, byte[]>(
                (Callback_DcClientIce_actDest cb, byte[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _actDest_name, cookie, completedCallback);
            _iceI_actDest(iceP_dest, iceP_topic, iceP_bytes, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_DcClientIce_pub> begin_pub(string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_pub(topic, bytes, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_pub(string topic, byte[] bytes, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_pub(topic, bytes, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_pub(string topic, byte[] bytes, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_pub(topic, bytes, context, callback, cookie, false);
        }

        public void end_pub(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _pub_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_DcClientIce_pub> begin_pub(string iceP_topic, byte[] iceP_bytes, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_DcClientIce_pub, object>(
                (Callback_DcClientIce_pub cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _pub_name, cookie, completedCallback);
            _iceI_pub(iceP_topic, iceP_bytes, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_DcClientIce_pubDest> begin_pubDest(string dest, string topic, byte[] bytes, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_pubDest(dest, topic, bytes, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_pubDest(string dest, string topic, byte[] bytes, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_pubDest(dest, topic, bytes, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_pubDest(string dest, string topic, byte[] bytes, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_pubDest(dest, topic, bytes, context, callback, cookie, false);
        }

        public void end_pubDest(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _pubDest_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_DcClientIce_pubDest> begin_pubDest(string iceP_dest, string iceP_topic, byte[] iceP_bytes, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_DcClientIce_pubDest, object>(
                (Callback_DcClientIce_pubDest cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _pubDest_name, cookie, completedCallback);
            _iceI_pubDest(iceP_dest, iceP_topic, iceP_bytes, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_DcClientIce_sub> begin_sub(string clientId, string topic, SubCallbackReceiverPrx receiver, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_sub(clientId, topic, receiver, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_sub(string clientId, string topic, SubCallbackReceiverPrx receiver, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_sub(clientId, topic, receiver, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_sub(string clientId, string topic, SubCallbackReceiverPrx receiver, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_sub(clientId, topic, receiver, context, callback, cookie, false);
        }

        public bool end_sub(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _sub_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_DcClientIce_sub> begin_sub(string iceP_clientId, string iceP_topic, SubCallbackReceiverPrx iceP_receiver, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_sub_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_DcClientIce_sub, bool>(
                (Callback_DcClientIce_sub cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _sub_name, cookie, completedCallback);
            _iceI_sub(iceP_clientId, iceP_topic, iceP_receiver, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static DcClientIcePrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            DcClientIcePrx r = b as DcClientIcePrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                DcClientIcePrxHelper h = new DcClientIcePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static DcClientIcePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            DcClientIcePrx r = b as DcClientIcePrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                DcClientIcePrxHelper h = new DcClientIcePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static DcClientIcePrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    DcClientIcePrxHelper h = new DcClientIcePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static DcClientIcePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    DcClientIcePrxHelper h = new DcClientIcePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static DcClientIcePrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            DcClientIcePrx r = b as DcClientIcePrx;
            if(r == null)
            {
                DcClientIcePrxHelper h = new DcClientIcePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static DcClientIcePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            DcClientIcePrxHelper h = new DcClientIcePrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::dc::DcClientIce"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, DcClientIcePrx v)
        {
            ostr.writeProxy(v);
        }

        public static DcClientIcePrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                DcClientIcePrxHelper result = new DcClientIcePrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace dc
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public abstract class SrvCallbackReceiverDisp_ : global::Ice.ObjectImpl, SrvCallbackReceiver
    {
        #region Slice operations

        public abstract byte[] callback(string extInfo, byte[] bytes, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::dc::SrvCallbackReceiver"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_callback(SrvCallbackReceiver obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_extInfo;
            byte[] iceP_bytes;
            iceP_extInfo = istr.readString();
            iceP_bytes = ByteSeqHelper.read(istr);
            inS.endReadParams();
            var ret = obj.callback(iceP_extInfo, iceP_bytes, current);
            var ostr = inS.startWriteParams();
            ByteSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "callback",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_callback(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public abstract class SubCallbackReceiverDisp_ : global::Ice.ObjectImpl, SubCallbackReceiver
    {
        #region Slice operations

        public abstract void callback(byte[] bytes, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::dc::SubCallbackReceiver"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_callback(SubCallbackReceiver obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_bytes;
            iceP_bytes = ByteSeqHelper.read(istr);
            inS.endReadParams();
            obj.callback(iceP_bytes, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "callback",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_callback(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public abstract class DcClientIceDisp_ : global::Ice.ObjectImpl, DcClientIce
    {
        #region Slice operations

        public abstract bool srv(string clientId, string topic, SrvCallbackReceiverPrx receiver, global::Ice.Current current = null);

        public abstract byte[] act(string topic, byte[] bytes, global::Ice.Current current = null);

        public abstract byte[] actDest(string dest, string topic, byte[] bytes, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task pubAsync(string topic, byte[] bytes, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task pubDestAsync(string dest, string topic, byte[] bytes, global::Ice.Current current = null);

        public abstract bool sub(string clientId, string topic, SubCallbackReceiverPrx receiver, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::dc::DcClientIce"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_srv(DcClientIce obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_clientId;
            string iceP_topic;
            SrvCallbackReceiverPrx iceP_receiver;
            iceP_clientId = istr.readString();
            iceP_topic = istr.readString();
            iceP_receiver = SrvCallbackReceiverPrxHelper.read(istr);
            inS.endReadParams();
            var ret = obj.srv(iceP_clientId, iceP_topic, iceP_receiver, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_act(DcClientIce obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_topic;
            byte[] iceP_bytes;
            iceP_topic = istr.readString();
            iceP_bytes = ByteSeqHelper.read(istr);
            inS.endReadParams();
            var ret = obj.act(iceP_topic, iceP_bytes, current);
            var ostr = inS.startWriteParams();
            ByteSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_actDest(DcClientIce obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_dest;
            string iceP_topic;
            byte[] iceP_bytes;
            iceP_dest = istr.readString();
            iceP_topic = istr.readString();
            iceP_bytes = ByteSeqHelper.read(istr);
            inS.endReadParams();
            var ret = obj.actDest(iceP_dest, iceP_topic, iceP_bytes, current);
            var ostr = inS.startWriteParams();
            ByteSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_pub(DcClientIce obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_topic;
            byte[] iceP_bytes;
            iceP_topic = istr.readString();
            iceP_bytes = ByteSeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask(obj.pubAsync(iceP_topic, iceP_bytes, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_pubDest(DcClientIce obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_dest;
            string iceP_topic;
            byte[] iceP_bytes;
            iceP_dest = istr.readString();
            iceP_topic = istr.readString();
            iceP_bytes = ByteSeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask(obj.pubDestAsync(iceP_dest, iceP_topic, iceP_bytes, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_sub(DcClientIce obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_clientId;
            string iceP_topic;
            SubCallbackReceiverPrx iceP_receiver;
            iceP_clientId = istr.readString();
            iceP_topic = istr.readString();
            iceP_receiver = SubCallbackReceiverPrxHelper.read(istr);
            inS.endReadParams();
            var ret = obj.sub(iceP_clientId, iceP_topic, iceP_receiver, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "act",
            "actDest",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "pub",
            "pubDest",
            "srv",
            "sub"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_act(this, inS, current);
                }
                case 1:
                {
                    return iceD_actDest(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 6:
                {
                    return iceD_pub(this, inS, current);
                }
                case 7:
                {
                    return iceD_pubDest(this, inS, current);
                }
                case 8:
                {
                    return iceD_srv(this, inS, current);
                }
                case 9:
                {
                    return iceD_sub(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
